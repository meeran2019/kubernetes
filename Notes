
--------------------------------------------------------------------------------------------------------
ARCHITECTURE:
--------------------------------------------------------------------------------------------------------

Nodes   - It is a machine (physical or virtual) where application/container runs.
Cluster - Group of nodes. Support high availability and consists of worker and master nodes. Also helps to sharing load. 
Master Node - It contains control plane and controls/manages worker nodes. If one worker node fails, route the traffic to another worker node. Master nodes can be single or multiple master nodes. 

Components:

api-server  - Act as frontend , users, CLI interact through this. 
etcd        - It is distributed key value pair. Stores all the kubernetes information. For example store cluster information. 
scheduler   - Responsible to run container or distribute load across nodes. 
controller  - It make sure replicas are maintained. 
container runtime   -   It helps to run containers like docker. 
kubelet     -  Agent runs on node. 

Master Vs Worker Nodes: 

Worker Nodes:
    Container Run Time Installed. 
    Kubelet Installed. 
    It has kube proxy. 

Master: 
    It has kube api-server. 
    It has etcd. 
    It has contoller and scheduler. 

Kubectl: It is CLI to interact with kubernetes. 
    kubectl cluster-info    
    kubectl get nodes 

--------------------------------------------------------------------------------------------------------

PODS: 

    It is kubernetes smallest object and has single instance. It can contain single or multiple container (helper container).

    Generally 1 to 1 relationship between pod and container. Each pod contain single container. 
    Depends upon load to increase the pod with in same or different nodes. 

    READY - Running containers in POD / Total containers in POD. 
    State - Waiting - ImagePullBackOff error - when docker image is not available. 

--------------------------------------------------------------------------------------------------------

YAML Format: 

    apiVersion: api_version
    kind: Pod/Replicaset/Deployment 
    metadata: 
      name:  (Name of kind)
      labels: (Key Value Pair) 
    spec: 
        (Depending upon object, this will change)

--------------------------------------------------------------------------------------------------------

REPLICASETS: 

    It helps to ensure the no of replica (pod) is always running. If node or pod is down, can run in another node. 

    Replication Controller  -> It is older. Existing labels will NOT be considered.No Selector.  
    Replication Set         -> It is new recommended. Existing labels will be considered. Have selector with matchLabels.

    NAME              DESIRED   CURRENT   READY   AGE
    new-replica-set   4         4         0       8s

    Desired - No of replicas. 
    Current - No of pod created. 
    Ready   - No of pod is running. 

--------------------------------------------------------------------------------------------------------

DEPLOYMENTS:     

    It helps to deploy the applications and upgrade using rolling update etc. 
    Underlying uses replicaset. 
    It helps with rollout. 
    Yaml file is same as replicaset i.e) only kind will be changed. 
    Containers -> Pods -> Replicaset -> Deployment. 

--------------------------------------------------------------------------------------------------------

NAMESPACES: 

    It is logical separation which acts separately. Useful to separate by environment etc like dev, test, prod. 
    It consists of: 
        kube-system
        kube-public 
        default 
    Can create new namespace and assign resoures to namespaces. 

    Within namespace, call directly by service name - service_name
    Outside of namespace, call using namespace      - service_name.namespace.svc.cluster.local 

    Namespace object used to create namespace in yaml format. 
    ResourceQuota object used to assign resoure to namespaces in yaml format. 

--------------------------------------------------------------------------------------------------------









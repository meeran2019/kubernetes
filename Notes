--------------------------------------------------------------------------------------------------------
ARCHITECTURE:
--------------------------------------------------------------------------------------------------------

Nodes   - It is a machine (physical or virtual) where application/container runs.
Cluster - Group of nodes. Support high availability and consists of worker and master nodes. Also helps to sharing load. 
Master Node - It contains control plane and controls/manages worker nodes. If one worker node fails, route the traffic to another worker node. Master nodes can be single or multiple master nodes. 

Components:

api-server  - Act as frontend , users, CLI interact through this. 
etcd        - It is distributed key value pair. Stores all the kubernetes information. For example store cluster information. 
scheduler   - Responsible to run container or distribute load across nodes. 
controller  - It make sure replicas are maintained. 
container runtime   -   It helps to run containers like docker. 
kubelet     -  Agent runs on node. 

Master Vs Worker Nodes: 

Worker Nodes:
    Container Run Time Installed. 
    Kubelet Installed. 
    It has kube proxy. 

Master: 
    It has kube api-server. 
    It has etcd. 
    It has contoller and scheduler. 

Kubectl: It is CLI to interact with kubernetes. 
    kubectl cluster-info    
    kubectl get nodes 

--------------------------------------------------------------------------------------------------------
KUBERNETES OBJECTS:
--------------------------------------------------------------------------------------------------------

PODS: 

    It is kubernetes smallest object and has single instance. It can contain single or multiple container (helper container).

    Generally 1 to 1 relationship between pod and container. Each pod contain single container. 
    Depends upon load to increase the pod with in same or different nodes. 

    READY - Running containers in POD / Total containers in POD. 
    State - Waiting - ImagePullBackOff error - when docker image is not available. 

--------------------------------------------------------------------------------------------------------

YAML FORMAT: 

    apiVersion: api_version
    kind: Pod/Replicaset/Deployment 
    metadata: 
      name:  (Name of kind)
      labels: (Key Value Pair) 
    spec: 
        (Depending upon object, this will change)

--------------------------------------------------------------------------------------------------------

REPLICASETS: 

    It helps to ensure the no of replica (pod) is always running. If node or pod is down, can run in another node. 

    Replication Controller  -> It is older. Existing labels will NOT be considered.No Selector.  
    Replication Set         -> It is new recommended. Existing labels will be considered. Have selector with matchLabels.

    NAME              DESIRED   CURRENT   READY   AGE
    new-replica-set   4         4         0       8s

    Desired - No of replicas. 
    Current - No of pod created. 
    Ready   - No of pod is running. 

--------------------------------------------------------------------------------------------------------

DEPLOYMENTS:     

    It helps to deploy the applications and upgrade using rolling update etc. 
    Underlying uses replicaset. 
    It helps with rollout. 
    Yaml file is same as replicaset i.e) only kind will be changed. 
    Containers -> Pods -> Replicaset -> Deployment. 

--------------------------------------------------------------------------------------------------------

NAMESPACES: 

    It is logical separation which acts separately. Useful to separate by environment etc like dev, test, prod. 
    It consists of: 
        kube-system
        kube-public 
        default 
    Can create new namespace and assign resoures to namespaces. 

    Within namespace, call directly by service name - service_name
    Outside of namespace, call using namespace      - service_name.namespace.svc.cluster.local 

    Namespace object used to create namespace in yaml format. 
    ResourceQuota object used to assign resoure to namespaces in yaml format. 


--------------------------------------------------------------------------------------------------------
CONFIGURATIONS
--------------------------------------------------------------------------------------------------------

COMMANDS AND ENTRYPOINT IN DOCKER: 

    Containers are meant to run specific task and container exists once process completed. 

    CMD sleep 5   or CMD ["sleep","5"]

    docker run ubuntu sleep 10      -> To override the command. 

    Command     -> CLI input is overridden. 
    Entrypoint  -> CLI input is appended. 

    Both entrypoint and command used, so it takes as entrypoint + command 

    ENTRYPOINT ["sleep"]
    CMD ["5"]   -> This will take as sleep 5. 

--------------------------------------------------------------------------------------------------------

COMMANDS AND ARGUMENT IN DOCKER: 

    It act same as docker except change in name. 

    CMD         <-> ARGS  
    ENTRYPOINT  <-> CMD 
    
--------------------------------------------------------------------------------------------------------    
ENVIRONMENT VARIABLES: 

    Can set the environment variable using env property. 
    It is array/list consists of name/value pair for plain text. name/valuefrom pair for configmap or secrets. 

-------------------------------------------------------------------------------------------------------- 

CONFIGMAPS: 

    In environment variable, hard code the value in pod. If any changes in value, require to update all pods. 

    Configmaps helps to store the name and value pair separately and refer in the pod. 

    It consists of: 
        Create the configmap using imperative and declarative way. 
        Inject the configmap to pod. 

    In Pod, it can be referred by using full configmap or specific key value from configmap. 

-------------------------------------------------------------------------------------------------------- 

SECRETS: 

    It is used to store the sensitive data. 

    It consists of: 
        Create the secret 
        Inject the secret to pod. 
    
    It can be create by imperative or declarative way. 

    Data value should be encoded format.

    echo -n 'value' | base64            -> To convert the value to base64 encoded. 

    echo -n 'value' | base64 --decode   -> To decode to plain text. 

    It refer in pod by 3 ways: 
        1. As envFrom   -> To pass the whole secret and secretRef to refer. 
        2. As env       -> To pass the specific key using valueFrom and secretKeyRef. 
        3. As volume    -> To mount the secrets as volume using volumes and secrets. 

-------------------------------------------------------------------------------------------------------- 

SECURITY IN DOCKER: 

    Container and docker engine in host runs in separate namespace. 
    Process ID will be different in different namespace. 
    By default, run as ROOT user. It can override by using --user=1000 or in USER 1000 in Dockerfile.
    ROOT user within container have restriction. 
    /usr/include/linux/capability.h contains the list of capabilities. 
    --cap-add    - to add capability 
    --cap-drop   - to drop capability 
    --privileges - to get all privileges. 

-------------------------------------------------------------------------------------------------------- 

SECURITY CONTEXT: 

    Security Context can be defined at pod or container level or both. 
    Pod level       - It affect that pod and underlying containers. 
    Container level - It affect that container alone. 
    Both level      - Container level overrides the pod level. 

    It is defined using securityContext property. 

    Capabilities support only at container level and not at POD level. 

-------------------------------------------------------------------------------------------------------- 

RESOURCE REQUIREMENTS: 

        CPU, Memory, Disk 
        Resources Request    - It is soft limit. 
        Resources Limit      - It is hard limit. 

        It is applied at each container level. 

        For CPU, it throttles after limit. For memory, can use more memory than limit and can be terminated. 

-------------------------------------------------------------------------------------------------------- 

SERVICE ACCOUNT: 

    Account types: 
        User account    - use by any humans like admin, developer. 
        Service account - use by machine like application (jenkins, prometheus) uses service account. 

    While create service account, it automatically generate the token. External application uses this token. Token is stored as secret object. 

    Token is taken from secret and used by external applications. 
    For native kubernetes application, just mount the token secret volume. 

    automountServiceAccountToken: false   -> To disable the service account token mount. 

    Using RBAC role binding, linked the service account with role. 

-------------------------------------------------------------------------------------------------------- 

TAINTS AND TOLERATIONS: 

    Taint applied on Nodes. 
    Tolerations applied on Pods. 
    If Tolerations, can withstand Taint, then allow to run the pod on specific nodes. 

    It doesnot tell to go the pod to specific nodes. It just restrict nodes from specific pod. 

    kubectl taint node node-name key=value:TaintEffect   -> Taint 
    kubectl taint node node-name key=value:TaintEffect-  -> UnTaint 

    Taint Effects: 
        NoSchedule          - Guarantee not to place and existing wont impact. 
        PreferNoSchedule    - No guarantee. Existing wont impact. 
        NoExecute           - New pods will not be scheduled and existing pods are evicted (killed).

    In POD, add Tolerations property. 

    Master node has taints only for kube system (control plane). 

-------------------------------------------------------------------------------------------------------- 

NODE NAME: 

    It is simplest method to directly select the node name. 
    It is hard coding the node name to schedule the pod. 

-------------------------------------------------------------------------------------------------------- 

NODE SELECTOR: 

    It helps to select the node based on the labels. 
    First requires to label the nodes and use the nodeSelector in pod to select the node. 
    Useful for simple problem just to select based on the labels. 

-------------------------------------------------------------------------------------------------------- 

NODE AFFINITY: 

    It provides advanced capability to place nodes. 
    It consists of affinity and nodeaffinity. 

    required During Scheduling Ignored During Execution. 
    required/ignored/preferred  - it checks whether required or preferred or ignored.         
    Scheduling/execution        - it checks during scheduling or execution. 

--------------------------------------------------------------------------------------------------------
MULTI CONTAINER PODS
--------------------------------------------------------------------------------------------------------

    Multi container pod created and destroyed together. Shares same network and storage. 

    Types of Design Pattern: 
        Ambassador: 
            Used for processing and data conversion. 
        Adaptor: 
            Used for plugin. To connect to database. 
        Sidecar: 
            Used for logging. Install logging agent as sidecar container. 

--------------------------------------------------------------------------------------------------------
OBSERVABILITY
--------------------------------------------------------------------------------------------------------

READINESS PROBE: 

    It helps to make kubernetes to know that pod is ready to serve user traffic. 

    POD Status: 
        Pending             - waiting to schedule the pod to node. 
        Container creating  - pod is scheduled and download the image and run the container. 
        Running             - it is running status. 
    
    POD Condition: 
        Pod Scheduled 
        Initialized 
        Container Ready 
        Ready               - once ready true, then only allow user traffic. 

    It can be done by: 
        HTTP test   - ping the path 
        TCP test    - ping port 
        EXEC test   - custom script. 
    
--------------------------------------------------------------------------------------------------------    

LIVENESS PROBE: 

    It is health check which periodically checks whether application is healthy. 

    It consists of: 
        HTTP test       - checks the http path. 
        TCP test        - checks the tcp port.
        EXEC command    - checks the command. 
    
    Liveness probe is health check.
    Readiness probe is to check whether container is ready to serve traffic. 

--------------------------------------------------------------------------------------------------------    

LOGGING: 

        docker logs container-id    -> To check logs in docker. 
        kubectl logs -f pod-name    -> To get the logs of pod. 
        kubectl logs -f pod-name container-name     -> To get the logs of container. 

--------------------------------------------------------------------------------------------------------

MONITORING: 

    It helps to know the cpu and memory usage of pod and nodes. Metrics server is used to get the real time metrics. 
    under the hood, uses cAdvisor to ge the metrics details which pass thorugh kubelet. 

    kubectl top node 
    kubectl top pod 

--------------------------------------------------------------------------------------------------------
POD DESIGN: 
--------------------------------------------------------------------------------------------------------

LABELS, SELECTORS & ANNOTATIONS: 

    Labels helps to group things (ex: environment by dev, test or prod)
    Selectors helps to select based on the labels. 

    Annotation is used to record any information that will be useful. 

--------------------------------------------------------------------------------------------------------    
ROLLING UPDATES & ROLLBACKS: 

    Deployment Strategy: 
        Rolling Update   - Install in few pods and no downtime. This is default strategy. 
        Recreate         - Have downtime and old versions are removed completely first and then install new version. 

    Based on Rolling update strategy - 25% max can be down and 25% max extra can take. 

        Selector:               app=nginx
        Replicas:               3 desired | 3 updated | 3 total | 3 available | 0 unavailable
        StrategyType:           RollingUpdate
        MinReadySeconds:        0
        RollingUpdateStrategy:  25% max unavailable, 25% max surge
        Pod Template:
        
-------------------------------------------------------------------------------------------------------- 

JOBS: 

    It helps to run the specific set of pod. 
    Job creates one or more pod and retry execution until specified number of them completed successfully.
    When specified number is reached, job is completed. 
    Note: RestartPolicy is Never. 

-------------------------------------------------------------------------------------------------------- 

CRON JOBS: 

    Job can be scheduled using CRON expression. 

    kubectl get cronjob             -> To get the cron job. 

    NAME    SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE
    hello   30 21 * * *   False     0        <none>          17s

--------------------------------------------------------------------------------------------------------
SERVICES AND NETWORKING: 
--------------------------------------------------------------------------------------------------------

SERVICES: 

    It enables communication within and outside applications/pods. 
    Enables front end application available to end user. 
    Backend application available to frontend application. 
    
    Based on selector, can support multiple pods and load balancing taken care by kubernetes. 
    If no of nodes increased, it will apply to all nodes. 

    Selector is used to link pod to service. 

    It consists of: 
        ClusterIP   - For internal communication (Ex: App to connect to database). 
                Request forwarded to service and service load balances the pod. 
                If pod is down, it doesnot affect as service group pod based on selector. 
                This is default service. 

        NodePort    - For external communication (Ex: User to connect to App).
                Target port (pod), Port (service), Node port (30000-32767 port range).
                Port is mandatory. Default takes target port as port. For node port, takes default in the range of 30000 to 32767. 

        LoadBalancer - It supports in cloud.
                Under the hood create the node port. 

        https://www.densify.com/kubernetes-autoscaling/kubernetes-service-load-balancer

--------------------------------------------------------------------------------------------------------

NETWORK POLICIES: 

    By Default, POD communicate with other POD & Services with in cluster. 
    Flannel doesnot support network policy. Calico, weave-net kube-router support network policy. 

    It consists of: 
        Ingress/Egress rule     -> Allow incoming or outgoing. 
        Ports                   -> On which port. 
        From/To Pods            -> From/To pod. 

    NOTE: 

    Here, after from, consists of array/list of selectors, this is consider as "OR". 

        ingress:
        - from: 
        - namespaceSelector: 

        - podSelector: 

    Here, after from single array/list of selector, this is consider as "AND"

        ingress:
        - from: 
        - namespaceSelector: 

          podSelector: 


--------------------------------------------------------------------------------------------------------

INGRESS: 

    An API object that manages external access to the services. 
    It supports HTTPS security and path based load balancing and name based virtual hosting. 
    Ingress is service which performs nodeport or load balancing. 

    It exposes HTTP/HTTPS routes from outside the cluster to services within cluster. 

    It contains ROUTING RULE.

    It consists of: 
        Ingress controller: 
                Not enabled by default. 
                Can be deployed by using GCE, nginx, contour, haproxy, istio etc. 

        Ingress resources: 
                It is created by using kind object. 
    
    Rule is based on domain/hosts and paths. 
    
    
    ip-address:port (using dns host) -> website-name:port (using proxy, changes from default port to required port) -> website address 

    --rewrite-target option

--------------------------------------------------------------------------------------------------------
STATE PERSISTENCE:
--------------------------------------------------------------------------------------------------------

DOCKER STORAGE: 

    Storage drivers: 

        /var/lib/docker     -> Docker stores all its data by default. 
        It is layered architecture and can resue the layer using cache, so create image faster.
        Image Layers - Read Only.
        Container Layer - Read Write layer - Used to store data. Life is till container alive.
        COPY-ON-WRITE mechanism.
        
        AUFS, Overlay, Overlay2, ZFS, Device Mapper - Storage Driver. 

    Volume drivers:

        Container data will be lost when container exists. To store the container data in host, use the volume. 
        docker volume create volume-name    -> to create the volume. 
        docker run -v volume-name:/var/lib/mysql image-name  -> To mount the volume. 
        Default data store under /var/lib/docker/volumes.
        docker run -v host-volume-path:container-path image-name  -> Bind mount, can choose other host location. 
        It is handled by volume drivers. 

    Volume Drivers Plugin: 

        Local, Convoy, NetApp, Azure File Storage etc. 

--------------------------------------------------------------------------------------------------------

VOLUMES IN KUBERNETES: 

    Volumes are created by using Volumes property.
    It mount to container/pod using mountVolumes. 

    Volume Types: 
        hostPath    - It stores separately in single node. If multiple node, difficult to get all volumes. so can use other common storage types to store in common place. 
        NFS
        Clusterfs 
        AWS, etc 

    It had disadvantage of manually creating volume and mount everytime by developer in pod.

--------------------------------------------------------------------------------------------------------

PERSISTENT VOLUMES: 

    It is pool of volume created by administrator. 
    User use the persistent volume claim to use this persistent volume. 

    Access Modes: 
        Read Only Many 
        Read Write Once 
        Read Write Many 
    
    Reclaim Policy: 
        Retain  -   PV is not deleted but not available for other. 
        Delete  -   PV is deleted. 
        Recycle -   PV is scrubbed. 
        
    Persistent volume claim to be created and it matches based on: 
        Sufficient capacity 
        Access Modes 
        Volume Modes 
        Storage Class 
        Selector 

    One to One relationship between PV & PVC.

--------------------------------------------------------------------------------------------------------

STORAGE CLASS: 

    Static Provisioning: 
        First to create the disk and then create PV on the disk. 
        Requires to create PV. 
        Create Disk -> PV -> PVC -> Pod 
        
    Dynamic Provisioning: 
        Here use the Storage Class. 
        No need to create disk. 
        Storage Class -> PVC -> Pod 
        If no-provisioner, then doesnot support dynamic provisioning. 

        VolumeBindingMode - WaitForFirstConsumer  - Pod to be created then PVC in bound status. 
        VolumeBindingMode - Immediate - It bound when PVC is tagged to PV. 

--------------------------------------------------------------------------------------------------------

STATEFUL SETS: 

    It is similar to deployment which creates pods based on templates. 
    Host name (pod name) will be same for every creation. 
    Pods run in sequence.
    New pods will be created from index name-0,name-1 for replicas.

    serviceName is required for statefulset. 

--------------------------------------------------------------------------------------------------------

HEADLESS SERVICE: 

    It is like normal service but doesnot do loadbalance or own IP addres. 
    Headless service is just do DNS entry for POD. 

    podname.headless-service-name.namespace.svc.cluster.local 

    clusterIP: None 

-------------------------------------------------------------------------------------------------------- 

STORAGE IN STATEFULSETS: 

    Generally in deployment, based on replicas , creates multiple pods. All pods use the same volume(by using, storage class, PVC).

    If require to create separate volume for separate pods in statefulset, it's possible by using "volumeclaimtemplate".

    VolumeClaimTemplate - It is declaring the PVC. which is used by pod to create separate PVC for each pod. 

-------------------------------------------------------------------------------------------------------- 

DEFINE, BUILD AND MODIFY CONTAINER IMAGES: 

    docker build -t tag -f docker-file 
    docker build -t tag Dockerfile

    Layers are cached and resued if rebuild. 

    From OS or other image. 
    ADD  copy from link to destination. TAR file is extracted and copied automatically. 
    COPY copy from local source to image destination. 

-------------------------------------------------------------------------------------------------------- 

AUTHENTICATION, AUTHORIZATION AND ADMISSION CONTROL: 

    Securing Hosts: 
        Password based authentication is disabled. 
        Kay based authentication. 
    
    Securing Kubernetes: 
        kube-apiserver: 
            Authentication (who can access): 
                Static Password Files - username & Password
                Static Token Files - username & tokens
                Certificates 
                External authentication provider - LDAP
                service accounts (for machines)

            Authorization (what they do)
                RBAC - Role based access control. 
                ABAC - Attribute based access control. 
                Node Authorization
                Web hook 
            
            TLS Certificates. 

            Network Policy (ingress & egress)

-------------------------------------------------------------------------------------------------------- 

AUTHENTICATION: 

    Kubernetes does not manage users. Cannot create users and view. 
    Service account can be created or managed.
    All access is managed by kube-apiserver which authenticates. 

-------------------------------------------------------------------------------------------------------- 

KUBE CONFIG: 

    Certificates can be used to authenticate the request by using --key, --cert, --cacert 
    For kubectl command, kube-config file is used which contains the cluster, user, context and certificate details. 

    HOME/.kube/config

    Clusters: 
        Cluster information. 
        dev, test, prod
        
        Certificate authority.
        Cluster details. 

    Contexts: 
        user@cluster.
        developer@prod 

    Users: 
        User information. 
        developer, admin 

        client certificate 
        client key 

-------------------------------------------------------------------------------------------------------- 

API GROUPS: 

    /version 
    /api 
    /apis 
    /logs 
    /metrics 
    /healthz 

    /api    - core group 
    /apis   - named group 

    /api/v1/namespace,pods, nodes etc 
    /apis/v1/apps,extensions,networking.k8s.io,storage.k8s.io,certificates.k8s.io 

    kubectl api-versions apps/v1 

    kubeproxy       - used for service communication. 
    kubectl proxy   - http proxy to access kube api-server. 

-------------------------------------------------------------------------------------------------------- 

AUTHORIZATION: 

    what user/machine can to do (authorized).

    Node Authorizer: 
            It is based on the group SYSTEM:NODE which certificate created. 
            With this group, kubelet is allowed to access kube api-server. 
    
    ABAC (Attribute Based Access Control): 
            It is to define the policy file. 
            policy file contains the user and required permissions. 
            Require to edit the policy file manually and restart the api-server. 
    
    RBAC (Role based Access Control): 
            Create the role with permissions. 
            Assign the role to user. 
            Just modify the role and reflect imeediately.
            It is standard approach. 
    
    Webhook: 
            Open Policy Agent: 
                    3rd party which maintain access details. 
                    kubernetes -> open policy agent 

    Always Allow and Always Deny. 
    
    Authorization Mode is defined in Kube-apiserver config file: 
        --authorization-mode=Node, RBAC, Webhook , AlwaysAllow (default)
        First checks, if denies then move next role. 

-------------------------------------------------------------------------------------------------------- 

ROLE BASED ACCESS CONTROL (RBAC): 

    It has scope of namespace. 

    Role - to create the role 
    Rolebinding - to link kin (user/group) to role. 

    kubectl auth can-i create deployments 
    kubectl auth can-i create deployments --as dev-user 

    Clusterrole and Clusterrolebinding is happen at node level. 

    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

-------------------------------------------------------------------------------------------------------- 

CLUSTER ROLES & CLUSTER ROLEBINDING: 

    Roles & Rolesbindings are specific to NAMESPACES. 
    Cluster role & Cluster rolebinding are specific to CLUSTER wide (NO Namespace).

    Namespaced Resources: Deployment, Pods, secrets, roles, rolebinding etc. 
    Cluster Resources: Nodes, Persistent volume, PVC, Clusterrole, cluster rolebinding, certificate signing request etc. 

    kubectl api-resources --namespaced=true     -> To get the namespaced resources. 

    clusterrole can be created for role also, it applies to all namespace.

-------------------------------------------------------------------------------------------------------- 

ADMISSION CONTROLLERS: 

    kubectl -> kube api-server (authentication - certificates) -> authorization (rbac) -> Admission controllers (validate the yaml file) -> resource process. 

    Admission Controller: 
        AlwaysPullImages 
        DefaultStorageClass 
        EventRateLimit 
        NamespaceExists 
        NamespaceAutoProvision (it enable if not exists)
        NamespaceLifeCycle 
        etc 

    kube-apiserver -h | grep enable-admission-plugins 

    --enable-admission-plugins      -> apiserver config file.
    --disable-admission-plugins     -> to disable the plugin. 

    NamespaceExists and NamespaceAutoProvision admission controllers are deprecated and replaced by NamespaceLifecycle. 

    NamespaceLifecycle - Requests to a non-existent namespace is rejected and that the default namespaces such as default, kube-system and kube-public cannot be deleted.

-------------------------------------------------------------------------------------------------------- 

VALIDATING AND MUTATING ADMISSION CONTROLLER: 

    Admission Controller Types: 
            Validating: 
                NamespaceLifeCycle 
            Mutating: (It changes the code)
                DefaultStorageClass - It added the default storage class in yaml file. 
            Both: 
                Mutating invoke first -> Validating 
    
    Mutating Admission Webhook 
    Validating Admission Webhook 
    
    1. Deploy Webhook server. (Receive request from kubernetes which mutate and validate the request and send the response in json to kubernetes)
    2. Deploy the webhook server in kubernetes an create the service. 
    3. Create the configuration: 
            kind: ValidatingWebhookConfiguration
    
    kubectl create secret tls tls-secret-name --cert=path/to/.crt  --key=path/to/.key   -> To create the TLS secret. 

-------------------------------------------------------------------------------------------------------- 

API VERSIONS: 

    /apis/apps/v1 

    V1 - GA (Generally Available) Stable versions. 
    /v1alpha    - not enabled by default. New functionality or code. 
    /v1beta     - enabled by default. may have minor bugs. 
    /v1         - stable version. 

    apps can support any versions supports at the same time. It is done by using preferred version. 
    Storage version is version stored in etcd. 

    --runtime-config=batch/v1alpha    -> To update the kube apiserver configuration. 

-------------------------------------------------------------------------------------------------------- 

API DEPRECATIONS: 

    /v1alpha -> /v1beta -> /v1 -> /v2alpha -> /v2beta -> /v2 

    kubectl convert -f old-file.yml --output-version apps/v1    -> To convert from one version to another. 

    kubectl convert is plugin and not available by default. 

    kubectl api-resources | grep deployment              -> To identify the short name. 

    1.22.3  -> 1 - major version, 22 - minor version , 3 - patch version 

    To identify prefered version: 
        kubectl proxy 8001&
        curl localhost:8001/apis/authorization.k8s.io

            {
                "kind": "APIGroup",
                "apiVersion": "v1",
                "name": "authorization.k8s.io",
                "versions": [
                {
                    "groupVersion": "authorization.k8s.io/v1",
                    "version": "v1"
                },
                {
                    "groupVersion": "authorization.k8s.io/v1beta1",
                    "version": "v1beta1"
                }
                ],
                "preferredVersion": {
                "groupVersion": "authorization.k8s.io/v1",
                "version": "v1"
                }
                
    Enable the new version: 
        
        Add the --runtime-config=rbac.authorization.k8s.io/v1alpha1 option to the kube-apiserver.yaml file.

    Install kubectl convert plugin: 

        https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/

        
-------------------------------------------------------------------------------------------------------- 

CUSTOM RESOURCE DEFINITION: 

    kind: CustomResourceDefinition

-------------------------------------------------------------------------------------------------------- 

CUSTOM CONTROLLER: 

-------------------------------------------------------------------------------------------------------- 

OPERATOR FRAMEWORK: 

    Custom controller and Custom resource definition are separate objects. 
    It can be combined as single package using operator framework. 

    OperatorHub.io      -  has operator list.

-------------------------------------------------------------------------------------------------------- 

DEPLOYMENT STRATEGY - BLUE GREEN: 

    Recreate        - Have downtime 
    Rolling update  - one by one deploy. (default strategy)

    Blue/Green: 
        Blue    - Old version 
        Green   - New version 
    
        1. Create the blue deployment with labels. 
        2. Create the service with labels on blue deployment. 
        3. Create the green environment with new labels. 
        4. To update the service with new labels on green deployment. 
        
    Canary: 
        It easily acheived by using servish mesh - istio 

        1. Create the old deployment 1 (old)
        2. create the new deployment 2. Contains one pod or lesser pod. 
        3. Create service definition which selects both old and new deployment. 
        4. To increase the pod in new deployment. 
        5. reduce the old deployment or update the service labels. 

-------------------------------------------------------------------------------------------------------- 

HELM INTRODUCTION: 

    Kubernetes considers only objects. 
    In project, consists of large number of objects which need to take individually. 
    Helm is consider as a package manager, which contains the required objects for the package/project. 

    helm install 
    helm upgrade 
    helm rollback 
    helm uninstall 

INSTALL: 

    https://helm.sh/docs/intro/install/


HELM CONCEPTS:

Helm Chart = Template + Values 

    File Structure: 

        templates 
            deployment.yaml 
            service.yaml 
            pvc.yaml 
                {{ .Values.storage }}
        
        values.yaml 
            storage: 10Gi 

    artifacthub.io, bitnami   -> Repository for helm chart. 
     
    helm install release-name chart-name 
    helm pull --untar repo/chart-name 

    helm search hub chart-name          -   to search chart in artifact repo.
    helm repo add name chart-repo-name  -   to add repo repository. 
    helm search repo chart-name         -   to search in repo. 
    helm repo list                      -   to list the repositories 
    helm install release-name repo-name/chartname   -   to install chart. 
    helm list                           -   to list installed charts.
    helm uninstall release-name         -   to uninstall chart. 
    helm pull repo/chart-name           -   to download as tara file. 
    helm pull --untar repo/chart-name   -   to untar 
    

-------------------------------------------------------------------------------------------------------- 



























